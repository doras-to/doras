---
import Layout from "../../layouts/UserLayout.astro";
import { downloadImageUser, getUserUsername, supabase } from "@/supabase";
import Branding from "@/components/Branding";
import LinksButton from "@/components/linkspage/LinksButton";
import * as lucide from "lucide-react";
import BioCheck from "@/components/linkspage/bio";
import ChipTabs from "@/components/linkspage/tabs";

const { user } = Astro.params;
if (!user) {
    return Astro.redirect("/");
}
const user_user = await getUserUsername(user);
if (!user_user) {
    return Astro.redirect("/doras");
}
if (!Astro.url.searchParams.get("preview")) {
    const { error } = await supabase.from("profiles").upsert({
        id: user_user.id as string,
        views: user_user.views + 1 || 1
    });
}
let VerifiedlinksData: any = await supabase.from("verified_links").select();
VerifiedlinksData = VerifiedlinksData?.data;

const hexToRgb = (hex: string) => {
    const bigint = parseInt(hex.slice(1), 16);
    const r = (bigint >> 16) & 255;
    const g = (bigint >> 8) & 255;
    const b = bigint & 255;
    return [r, g, b];
};
function getTextColorForBackground(background: string): string {
    const isGradient = background.includes("radial-gradient") || background.includes("linear-gradient");
    if (isGradient) {
        // Handle gradient background
        const colorStops = background.match(/#[0-9A-Fa-f]{6}/g) || [];
        if (colorStops.length === 0) {
            // No color stops found, default to a text color (e.g., black or white)
            return "black"; // Use black text by default
        }
        const totalLuminance = colorStops.reduce((acc, color) => {
            const [r, g, b] = hexToRgb(color);
            return acc + (0.299 * r + 0.587 * g + 0.114 * b);
        }, 0);
        const averageLuminance = totalLuminance / colorStops.length;
        if (averageLuminance > 128) {
            return "black"; // Use black text for light gradients
        } else {
            return "white"; // Use white text for dark gradients
        }
    } else {
        // Handle solid background color
        const [r, g, b] = hexToRgb(background);
        const luminance = 0.299 * r + 0.587 * g + 0.114 * b;
        if (luminance > 128) {
            return "black"; // Use black text for light backgrounds
        } else {
            return "white"; // Use white text for dark backgrounds
        }
    }
}
const textColorSolid = getTextColorForBackground(user_user.theme.background);
let style: any = { backgroundColor: user_user.theme.button, color: getTextColorForBackground(user_user.theme.button) };
if (user_user.theme.inset) {
    style = { backgroundColor: "#00000000", borderWidth: "2px", borderColor: user_user.theme.button, color: getTextColorForBackground(user_user.theme.background) };
}
let font_style = {};
if (!user_user.theme.font || user_user.theme.font.font.length == 0) {
    font_style = {};
} else {
    font_style = {
        fontFamily: user_user.theme.font?.font + "," + user_user.theme.font?.family
    };
}
//mask-circle
//mask-squircle
//mask-hexagon
//mask-hexagon-2
---

<Layout user={user_user} title={`${user_user.displayname} | Doras.to`} bio={user_user?.bio || ""} img={downloadImageUser(user_user.pic)} theme={user_user.theme}>
    <main class="max-w-xl mx-auto">
        <div>
            <div class="flex flex-col mx-auto px-3 justify-center items-center pb-3" style={font_style}>
                <div class="flex flex-col justify-center items-center">
                    <img src={downloadImageUser(user_user.pic)} class={"w-44 h-44 object-cover mask " + user_user.design.profile_pic_shape} />
                    <div class="flex items-center mx-auto text-center">
                        <h2 class="flex items-center text-4xl font-black" style={{ color: textColorSolid }}>
                            {user_user.displayname}
                            {
                                user_user.account_type == "premium" && (
                                    <div class="tooltip" data-tip="Premium">
                                        <lucide.BadgeCheck className="ml-1" />
                                    </div>
                                )
                            }
                            {
                                user_user.account_type == "staff" && (
                                    <div class="tooltip tooltip-primary tooltip-left z-50" data-tip="Staff">
                                        <lucide.ShieldCheck className="ml-1" />
                                    </div>
                                )
                            }
                        </h2>
                    </div>
                    <!-- <p class="pb-4 max-w-xl text-center" style={{ color: textColorSolid }}>{user_user.bio}</p> -->
                    <BioCheck color={textColorSolid} bio={user_user?.bio || ""} />
                </div>
                <p>{user_user.story}</p>
            </div>
            <div class="flex justify-center">
                <Branding />
            </div>
            <div class="w-full sticky bottom-5 z-50 pt-9">
                <ChipTabs url={Astro.url.pathname} user={user_user} client:load />
            </div>
        </div>
    </main>
</Layout>
