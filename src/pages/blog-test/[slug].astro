---
interface Post {
    id: number;
    date: string;
    date_gmt: string;
    guid: { rendered: string };
    modified: string;
    modified_gmt: string;
    slug: string;
    status: string;
    type: string;
    link: string;
    title: { rendered: string };
    content: { rendered: string; protected: boolean };
    excerpt: { rendered: string; protected: boolean };
    author: number;
    featured_media: number;
    comment_status: string;
    ping_status: string;
    sticky: boolean;
    template: string;
    format: string;
    meta: { footnotes: string };
    categories: number[];
    tags: string[];
    _links: {
        self: { href: string }[];
        collection: { href: string }[];
        about: { href: string }[];
        author: { embeddable: boolean; href: string }[];
        replies: { embeddable: boolean; href: string }[];
        versionHistory: { count: number; href: string }[];
        predecessorVersion: { id: number; href: string }[];
        "wp:attachment": { href: string }[];
        "wp:term": { taxonomy: string; embeddable: boolean; href: string }[];
        curies: { name: string; href: string; templated: boolean }[];
    };
}

import Layout from "@/layouts/MDLayout.astro";
import BlankLayout from "@/layouts/BlankLayout.astro";
import Container from "@/components/container.astro";
const { slug } = Astro.params;
import { Image } from "astro:assets";
import { Button } from "@/components/ui/button";
import { BsDiscord } from "react-icons/bs/index.js";
let res = await fetch(`https://cms.doras.to/wp-json/wp/v2/posts?slug=${slug}`);
let [post]: Post[] = await res.json();
// Fetch the category name
let category;
if (post) {
    let categoryRes = await fetch(`https://cms.doras.to/wp-json/wp/v2/categories/${post.categories[0]}`);
    category = await categoryRes.json();
}

// Fetch the author name
let author;
if (post) {
    let authorRes = await fetch(`https://cms.doras.to/wp-json/wp/v2/users/${post.author}`);
    author = await authorRes.json();
}

// The getStaticPaths() is required for static Astro sites.
// If using SSR, you will not need this function.
let user: { username: string; displayname: string; pic: string } = { username: "", displayname: "", pic: "" };
if (post) {
    let userRes = await fetch(`https://api.doras.to/user/${author.name}`);
    user = await userRes.json();
}
let featuredmedia: { guid: { rendered: string } } = { guid: { rendered: "" } };
if (post) {
    let featuredmediaRes = await fetch(`https://cms.doras.to/wp-json/wp/v2/media/${post.featured_media}`);
    featuredmedia = await featuredmediaRes.json();
}
export async function getStaticPaths() {
    let data = await fetch("`https://cms.doras.to/wp-json/wp/v2/posts");
    let posts = await data.json();

    return posts.map((post: Post) => ({
        params: { slug: post.slug },
        props: { post: post }
    }));
}
---

{!post && 
<BlankLayout title="Rip, that's a 404">
    <div class="bg-[conic-gradient(at_bottom_left,_var(--tw-gradient-stops))] from-primary-500 via-surface-700 to-surface-700 h-screen flex items-center">
        <div class="mx-auto max-w-xl text-center text-white">
            <h1 class="font-black text-5xl">That's a 404, bud</h1>
            <p class="mb-7 mt-3">Sorry, we couldn't find what you were looking for. It either never existed, or we've messed something up!</p>
            <div class="flex items-center place-content-center gap-3">
                <a href="/"><Button variant="outline" className="!border-surface-100 text-surface-100 p-4 font-bold w-full">Back home</Button></a>
                <a href="https://doras.to/discord"><Button variant="outline" className="!border-surface-100 text-surface-100 p-4 font-bold w-full flex gap-2"><BsDiscord /> Report an issue</Button></a>
            </div>
        </div>
    </div>
</BlankLayout>
||
(
<Layout title={post.title.rendered}>
    <Container>
        <div class="mx-auto max-w-3xl text-center mt-6">
                <span class="text-primary-500 uppercase tracking-wider text-sm font-black">{category.name}</span>
                <h1 class="text-3xl lg:text-4xl font-bold lg:tracking-tight mt-1 lg:leading-tight text-surface-900 mb-0" set:html={post.title.rendered} />
                <span class="font-bold text-sm">{new Date(post.date).toLocaleDateString()}</span>
                <div class="flex gap-2 mt-1 items-center justify-center text-sm flex-wrap md:flex-nowrap">
                    <a href={`https://doras.to/${user.username}`} class="text-surface-600">
                        <div class="flex items-center gap-2 w-full">
                            <img src={user.pic} class="w-6 rounded-xl" />
                            <span class="font-bold">{user.displayname}</span>
                        </div>
                    </a>
                    <!-- <span class="text-surface-600 hidden md:block">•</span> -->
                    <!-- <div class="w-full md:w-auto flex flex-wrap justify-center gap-3">
                        {entry.data.tags.map((tag) => <span class="text-sm text-primary-500">#{tag}</span>)}
                    </div> -->
                    <a href="/blog-test" class="font-bold text-primary-500 transition">← Back to Blog</a>
                </div>
                <article class="mx-auto">
                <div class="mx-auto max-w-4xl flex place-content-center">
                    {featuredmedia.guid?.rendered && <Image src={featuredmedia?.guid?.rendered} alt="Feature image" width="100" height="100" class="h-1/2 w-1/2 object-contain object-top rounded-xl mt-6" transition:name={`post-img-${post.slug}`} />}
                </div>
                <Fragment set:html={post.content.rendered} />
            </article>
            <div class="text-center py-12">
            <a href="/blog" class="bg-primary-500 text-white font-bold px-5 py-3 rounded-md hover:bg-primary-400 transition">← Back to Blog</a>
        </div>
        </div>
    </Container>
</Layout>
)}