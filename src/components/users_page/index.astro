---
import Layout from "../../layouts/UserLayout.astro";
import { downloadImageUser, supabase } from "@/supabase";
import LinksButton from "@/components/linkspage/LinksButton";
import { getTextColorForBackground } from "@/lib/utils";
import BioBlock from "@/components/linkspage/BioBlock";
import type { ServerDataItem } from "@/server_types";
import type { ILinksPageTabs } from "../linkspage/tabs";
interface Props {
    user: ServerDataItem;
    tabs: ILinksPageTabs[];
}

const { user, tabs }: Props = Astro.props;
const user_user = user;
if (Astro.url.searchParams.get("preview")) {
} else {
    const Referer = Astro.request.headers.get("Referer");
    if (Referer != null) {
        let RefererFound = user_user.stats.referer.find((e: any) => e.url == Referer);
        if (!RefererFound) {
            user_user.stats.referer.push({ url: Referer, views: [new Date().toISOString()] });
        } else {
            //@ts-ignore
            user_user.stats.referer.find((e: any) => e.url == Referer).views.push(new Date().toISOString());
        }
    } else {
        let RefererFound = user_user.stats.referer.find((e: any) => e.url == "direct");
        if (!RefererFound) {
            user_user.stats.referer.push({ url: "direct", views: [new Date().toISOString()] });
        } else {
            //@ts-ignore
            user_user.stats.referer.find((e: any) => e.url == "direct").views.push(new Date().toISOString());
        }
    }
    const { error } = await supabase.from("profiles").upsert({
        id: user_user.id as string,
        stats: {
            unique_views: user_user.stats.unique_views,
            referer: user_user.stats.referer
        },
        views: (user_user.views += 1)
    });
}
let VerifiedlinksData: any = await supabase.from("verified_links").select();
VerifiedlinksData = VerifiedlinksData?.data;
let blocks = user_user.links;
const textColorSolid = getTextColorForBackground(user_user.theme.background);
let style: any = { backgroundColor: user_user.theme.button, color: getTextColorForBackground(user_user.theme.button) };
if (user_user.theme.inset) {
    style = { backgroundColor: "#00000000", borderWidth: "2px", borderColor: user_user.theme.button, color: getTextColorForBackground(user_user.theme.background) };
}
let font_style = {};
if (!user_user.theme.font || user_user.theme.font.font.length == 0) {
    font_style = {};
} else {
    font_style = {
        fontFamily: user_user.theme.font?.font + "," + user_user.theme.font?.family
    };
}
---

<Layout tabs={tabs} user={user_user} title={`${user_user.displayname} | Doras.to`} bio={user_user?.bio || ""} img={downloadImageUser(user_user.pic)} theme={user_user.theme}>
    <main class="max-w-xl mx-auto pb-0">
        <div>
            <div class="flex flex-col mx-auto px-3 justify-center items-center" style={font_style}>
                <BioBlock img={downloadImageUser(user_user.pic)} user={user_user} textColorSolid={textColorSolid} client:load />
                <div id="items" class="flex flex-col w-full gap-4">
                    {/* LINK */}
                    {
                        blocks
                            .filter((e) => e.show)
                            .map(async (link) => {
                                if (link.type == "youtube") {
                                    let youtube = await fetch(`https://api.doras.to/links/youtube/${link.url}`)
                                        .then(function (response) {
                                            return response.json();
                                        })
                                        .then(function (data) {
                                            if (!data.live) {
                                                return;
                                            }
                                            return <iframe class="aspect-video rounded-lg h-full w-full" src={`https://www.youtube.com/embed/${data.meta.url}?enablejsapi=1&autoplay=true&mute=true`} title={data.meta.ogTitle} allow="" />;
                                        })
                                        .catch(function (error) {
                                            return;
                                        });
                                    return youtube;
                                }
                                if (link.type == "twitch") {
                                    let twitch = await fetch(`https://api.doras.to/links/twitch/${link.url}`)
                                        .then(function (response) {
                                            return response.json();
                                        })
                                        .then(function (data) {
                                            if (!data.live) {
                                                return;
                                            }
                                            return <iframe class="aspect-video rounded-lg w-full h-full" src={`https://player.twitch.tv/?channel=${link.url}&mute=true&parent=localhost&parent=doras.to`} />;
                                        })
                                        .catch(function (error) {
                                            return;
                                        });
                                    return twitch;
                                }
                                if (link.type == "textblock") {
                                    let custom: string = "";
                                    if (link.options?.bold_text) {
                                        custom += "font-bold ";
                                    }
                                    if (link.options?.center_text) {
                                        custom += "text-center";
                                    }
                                    return (
                                        <p class={"p-2 rounded-lg " + custom} style={{ background: link.colour.toggle ? link.colour.background : user_user.theme.button, color: getTextColorForBackground(link.colour.toggle ? link.colour.background : user_user.theme.button) }}>
                                            {link.message}
                                        </p>
                                    );
                                }
                                if (link.type == "spotify") {
                                    //@ts-ignore
                                    let type = link.url.split("/")[link.url.split("/").length - 2];
                                    //@ts-ignore
                                    link.url = link.url.split("/")[link.url.split("/").length - 1];
                                    //@ts-ignore
                                    return <iframe style="border-radius:12px" src={`https://open.spotify.com/embed/${type}/${link.url}?utm_source=generator&theme=0`} width="100%" height="152" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy" />;
                                }
                                if (link.type == "github_user") {
                                    let hide: string = "";
                                    if (!link.options.stars) {
                                        hide += "stars,";
                                    }
                                    if (!link.options.prs) {
                                        hide += "prs,";
                                    }
                                    if (!link.options.issues) {
                                        hide += "issues,";
                                    }
                                    if (!link.options.contribs) {
                                        hide += "contribs,";
                                    }
                                    let TextColour = "fffff";
                                    if (getTextColorForBackground(link.colour.background) == "white") {
                                        TextColour = "ffffff";
                                    } else {
                                        TextColour = "000000";
                                    }
                                    return (
                                        <a href={"https://github.com/" + link.url} target="_blank" class="w-full">
                                            <img loading="lazy" style={`border-radius:12px;`} width="100%" src={`https://github-stats.doras.to/?username=${link.url}&theme=dark&show_icons=true&bg_color=${link.colour.background.replace("#", "")}&text_color=${TextColour}&icon_color=${TextColour}&title_color=${TextColour}&hide_border=true&hide_rank=${!link.options?.rank}&hide=${hide}`} />
                                        </a>
                                    );
                                }
                                if (link.type == "divider") {
                                    return <div class="border-b-2 mt-1 mb-2" style={{ borderColor: link.colour.toggle ? link.colour.background : "white" }} />;
                                }
                                if (link.type == "link") {
                                    if (link.colour?.toggle) {
                                        let userstyle: any = { backgroundColor: link.colour.background, color: getTextColorForBackground(link.colour.background) };
                                        if (user_user.theme.inset) {
                                            userstyle = { backgroundColor: link.colour.background, borderWidth: "2px", borderColor: user_user.theme.button, color: getTextColorForBackground(user_user.theme.button) };
                                        }
                                        return <LinksButton client:load id={user_user.id} verifiedData={VerifiedlinksData} link={link} style={userstyle} className={user_user.theme.button_rounded} text={link.name} textColor="black" href={link.url || ""} bgColor="primary-500" Icon={link.icon || ""} />;
                                    }
                                    return <LinksButton client:load id={user_user.id} verifiedData={VerifiedlinksData} link={link} style={style} className={user_user.theme.button_rounded} text={link.name} textColor="black" href={link.url || ""} bgColor="primary-500" Icon={link.icon || ""} />;
                                }
                            })
                    }
                </div>
            </div>
        </div>
    </main>
</Layout>
